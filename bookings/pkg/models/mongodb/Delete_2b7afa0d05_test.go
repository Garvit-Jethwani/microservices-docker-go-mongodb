// Test generated by RoostGPT for test go-roost-remote using AI Type Azure Open AI and AI Model roost-gpt4-32k

/*
1. Positive Scenario: When a valid `id` that is present in the collection is passed to the `Delete` function, the function should successfully delete the record and return the result and no error.

2. Negative Scenario: When an `id` passed is not present in the collection, the `Delete` function still returns a success response but the number of deleted documents is zero.

3. Negative Scenario: When an invalid `id` which is not a hexadecimal string is passed to the `Delete` function, it should return an error because `primitive.ObjectIDFromHex()` is unable to convert the `id` to a valid Object ID.

4. Edge Case: When an empty string is passed as `id` to the `Delete` function, it should return an error from `primitive.ObjectIDFromHex()`, as an empty string is an invalid hexadecimal representation.

5. Negative Scenario: When `DeleteOne` operation fails due to certain issues like insufficient permissions, it should return the respective error.

6. Negative Scenario: If the passed `id` is `nil`, the function should return error indicating invalid argument.

7. Negative Scenario: When `DeleteOne` operation is interrupted due to some reason (like network failure or server shutdown), the function should return an error.

8. Edge Case: If context passed to `m.C.DeleteOne` method gets cancelled before the delete operation could complete (due to timeout or external cancellation request), the function should return a context cancellation error.
*/
package mongodb

import (
	"context"
	"errors"
	"testing"

	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/mongoiface"
	"go.mongodb.org/mongo-driver/mongo/options"
)

type mockCollection struct {
	mongoiface.CollectionAPI
	DeleteOneFunc func(ctx context.Context, filter interface{}, opts ...*options.DeleteOptions) (*mongo.DeleteResult, error)
}

func (m *mockCollection) DeleteOne(ctx context.Context, filter interface{}, opts ...*options.DeleteOptions) (*mongo.DeleteResult, error) {
	return m.DeleteOneFunc(ctx, filter, opts...)
}

func TestDelete_2b7afa0d05(t *testing.T) {
	tests := []struct {
		name      string
		id        string
		deleteRes *mongo.DeleteResult
		err       error
		wantErr   bool
	}{
		{
			name: "Positive Scenario",
			id:   "507f1f77bcf86cd799439011",
			deleteRes: &mongo.DeleteResult{
				DeletedCount: 1,
			},
		},
		{
			name: "Negative Scenario: Id not present in collection",
			id:   "5f8ee4a6c23994a71042b0ea",
			deleteRes: &mongo.DeleteResult{
				DeletedCount: 0,
			},
		},
		{
			name:    "Negative Scenario: Invalid Hexadecimal string",
			id:      "InvalidID_1234",
			err:     errors.New("Invalid hex: encoding/hex: invalid byte: U+0049 'I'"),
			wantErr: true,
		},
		{
			name:    "Edge Case: Empty string as Id",
			id:      "",
			err:     errors.New("ObjectIDFromHex error: The provided hex string is not a valid ObjectID"),
			wantErr: true,
		},
		{
			name:    "Negative Scenario: Insufficient permissions",
			id:      "507f1f77bcf86cd799439011",
			err:     errors.New("Operation not permitted"),
			wantErr: true,
		},
		{
			name:    "Negative Scenario: nil Id",
			id:      nil,
			err:     errors.New("Invalid argument"),
			wantErr: true,
		},
		{
			name:    "Negative Scenario: Operation interrupted",
			id:      "507f1f77bcf86cd799439011",
			err:     errors.New("Operation interrupted"),
			wantErr: true,
		},
		{
			name:    "Edge Case: Context cancellation",
			id:      "507f1f77bcf86cd799439011",
			err:     errors.New("Context cancelled"),
			wantErr: true,
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			m := &BookingModel{
				C: &mockCollection{
					DeleteOneFunc: func(ctx context.Context, filter interface{}, opts ...*options.DeleteOptions) (*mongo.DeleteResult, error) {
						return test.deleteRes, test.err
					},
				},
			}

			got, err := m.Delete(test.id)
			if err != nil && test.wantErr {
				t.Logf("expected error, got %v", err)
			} else if test.wantErr {
				t.Errorf("expected error, got nil")
			} else if err != nil {
				t.Errorf("did not expect error, got %v", err)
			}

			if got != test.deleteRes {
				t.Errorf("expected %v, got %v", test.deleteRes, got)
			}
		})
	}
}
