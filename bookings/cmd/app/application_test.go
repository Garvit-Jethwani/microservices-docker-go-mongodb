// ********RoostGPT********
/*
Application Test generated by RoostGPT for test ApplicationTest-Golang-2 using AI Type Open AI and AI Model gpt-4-turbo


*/

// ********RoostGPT********
package main

import (
	"bytes"
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/mmorejon/microservices-docker-go-mongodb/bookings/pkg/models"
	"github.com/gorilla/mux"
)

// mockApplication creates application with mocked dependencies for handlers
func mockApplication() *application {
	return &application{
		bookings: &mockBookingModel{},
	}
}

// setupTestServer initializes a new httptest.Server
func setupTestServer(router *mux.Router) *httptest.Server {
	server := httptest.NewServer(router)
	return server
}

// TestAllBookings tests the endpoint GET /bookings
func TestAllBookings(t *testing.T) {
	app := mockApplication()
	router := mux.NewRouter()
	router.HandleFunc("/bookings", app.allBookings).Methods("GET")
	server := setupTestServer(router)
	defer server.Close()

	resp, err := http.Get(server.URL + "/bookings")
	if err != nil {
		t.Fatal(err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		t.Errorf("expected status OK; got %v", resp.Status)
	}

	var bookings []models.Booking
	if err := json.NewDecoder(resp.Body).Decode(&bookings); err != nil {
		t.Fatal(err)
	}

	if len(bookings) != 2 { // Assuming the mock returns 2 bookings
		t.Errorf("expected 2 bookings; got %d", len(bookings))
	}
}

// TestFindByID tests the endpoint GET /bookings/{id}
func TestFindByID(t *testing.T) {
	app := mockApplication()
	router := mux.NewRouter()
	router.HandleFunc("/bookings/{id}", app.findByID).Methods("GET")
	server := setupTestServer(router)
	defer server.Close()

	resp, err := http.Get(server.URL + "/bookings/12345")
	if err != nil {
		t.Fatal(err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		t.Errorf("expected status OK; got %v", resp.Status)
	}

	var booking models.Booking
	if err := json.NewDecoder(resp.Body).Decode(&booking); err != nil {
		t.Fatal(err)
	}

	if booking.ID != "12345" { // Assuming the mock finds booking with ID 12345
		t.Errorf("expected booking with ID 12345; got %v", booking.ID)
	}
}

// TestInsert tests the endpoint POST /bookings
func TestInsert(t *testing.T) {
	app := mockApplication()
	router := mux.NewRouter()
	router.HandleFunc("/bookings", app.insert).Methods("POST")
	server := setupTestServer(router)
	defer server.Close()

	newBooking := models.Booking{
		ID: "new123",
	}
	jsonData, err := json.Marshal(newBooking)
	if err != nil {
		t.Fatal(err)
	}

	resp, err := http.Post(server.URL+"/bookings", "application/json", bytes.NewBuffer(jsonData))
	if err != nil {
		t.Fatal(err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		t.Errorf("expected status OK; got %v", resp.Status)
	}
}

// TestDelete tests the endpoint DELETE /bookings/{id}
func TestDelete(t *testing.T) {
	app := mockApplication()
	router := mux.NewRouter()
	router.HandleFunc("/bookings/{id}", app.delete).Methods("DELETE")
	server := setupTestServer(router)
	defer server.Close()

	req, err := http.NewRequest("DELETE", server.URL+"/bookings/12345", nil)
	if err != nil {
		t.Fatal(err)
	}

	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		t.Fatal(err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		t.Errorf("expected status OK; got %v", resp.Status)
	}
}

// mockBookingModel is a mock for BookingModel, simplifying implementations for tests
type mockBookingModel struct{}

func (m *mockBookingModel) All() ([]models.Booking, error) {
	return []models.Booking{{ID: "123"}, {ID: "456"}}, nil
}

func (m *mockBookingModel) Insert(b models.Booking) (*mongo.InsertOneResult, error) {
	return &mongo.InsertOneResult{InsertedID: b.ID}, nil
}

func (m *mockBookingModel) FindByID(id string) (*models.Booking, error) {
	return &models.Booking{ID: id}, nil
}

func (m *mockBookingModel) Delete(id string) (*mongo.DeleteResult, error) {
	return &mongo.DeleteResult{DeletedCount: 1}, nil
}

