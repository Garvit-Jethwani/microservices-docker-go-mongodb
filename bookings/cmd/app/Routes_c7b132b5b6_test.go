// Test generated by RoostGPT for test go-mcvs using AI Type Azure Open AI and AI Model roost-gpt4-32k

/*
Test Scenario 1: Get all bookings
- Send a GET request to the "/api/bookings/" endpoint.
- Verify that the server responds with a 200 status code.
- Verify that the response data format matches the expected format.

Test Scenario 2: Find bookings by ID
- Send a GET request to the "/api/bookings/{id}" endpoint.
- If an invalid ID or non-existent ID is used, the server should respond with a 404 status code.
- If a valid ID is used, it should respond with a 200 status code.
- Verify that the response data matches the expected data for that ID.

Test Scenario 3: Insert new booking
- Send a POST request to the "/api/bookings/" endpoint with the required data in the request body.
- Verify that the server responds with a 201 status code upon successful creation.
- Verify that the response includes the details of the created booking.
- Invalid or incomplete data should result in a 400 status code.

Test Scenario 4: Delete a booking
- Send a DELETE request to the "/api/bookings/{id}" endpoint with a valid ID.
- Verify that the server responds with a 200 status code upon successful deletion.
- If a non-existent or invalid ID is used, the server should respond with a 404 status code.

Test Scenario 5: Check routing functionality
- All the routes should only be accessible by their respective methods.
- Sending a request to the endpoint using an incorrect method (like sending a POST request to "/api/bookings/{id}") should result in a 405 status code.

Test Scenario 6: Check bad route handling
- Sending a request to an undefined route should return a 404 status code.
- It should correctly handle valid routes and return the expected responses.
*/
package main

import (
	"net/http"
	"net/http/httptest"
	"testing"
)

func TestRoutes_c7b132b5b6(t *testing.T) {
	app := &application{}

	tests := []struct {
		name           string
		method         string
		route          string
		body           string
		expectedStatus int
	}{
		{
			"Get all bookings",
			"GET",
			"/api/bookings/",
			"",
			http.StatusOK,
		},
		{
			"Find bookings by non-existent ID",
			"GET",
			"/api/bookings/non-existent-id",
			"",
			http.StatusNotFound,
		},
		{
			"Find bookings by valid ID",
			"GET",
			"/api/bookings/existing-id",
			"",
			http.StatusOK,
		},
		{
			"Insert new booking",
			"POST",
			"/api/bookings/",
			"booking data",
			http.StatusCreated,
		},
		{
			"Insert booking with invalid data",
			"POST",
			"/api/bookings/",
			"invalid booking data",
			http.StatusBadRequest,
		},
		{
			"Delete a booking with valid ID",
			"DELETE",
			"/api/bookings/existing-id",
			"",
			http.StatusOK,
		},
		{
			"Delete a booking with non-existent ID",
			"DELETE",
			"/api/bookings/non-existent-id",
			"",
			http.StatusNotFound,
		},
		{
			"Check routing functionality",
			"POST",
			"/api/bookings/existing-id",
			"",
			http.StatusMethodNotAllowed,
		},
		{
			"Check bad route handling",
			"GET",
			"/bad-route",
			"",
			http.StatusNotFound,
		},
	}

	for _, tt := range tests {
		req, err := http.NewRequest(tt.method, tt.route, nil)
		if err != nil {
			t.Fatal(err)
		}

		rr := httptest.NewRecorder()
		app.routes().ServeHTTP(rr, req)

		t.Log(tt.name)

		if status := rr.Code; status != tt.expectedStatus {
			t.Logf("handler returned wrong status code: got %v want %v", status, tt.expectedStatus)
			t.Fail()
		} else {
			t.Log("Successfully passed")
		}
	}
}
