// ********RoostGPT********
/*
Application Test generated by RoostGPT for test ApplicationTest-Golang-2 using AI Type Open AI and AI Model gpt-4-turbo


*/

// ********RoostGPT********
package main

import (
	"bytes"
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/gin-gonic/gin"
	"github.com/stretchr/testify/assert"
)

// setupRouter is a helper function to setup the Gin router for testing
func setupRouter() *gin.Engine {
	gin.SetMode(gin.TestMode)
	router := gin.Default()
	// RegisterRoutes(router)
	return router
}

// TestGetShowtimes tests the GET /showtimes endpoint
func TestGetShowtimes(t *testing.T) {
	router := setupRouter()

	req, _ := http.NewRequest(http.MethodGet, "/showtimes", nil)
	w := httptest.NewRecorder()
	router.ServeHTTP(w, req)

	assert.Equal(t, http.StatusOK, w.Code, "Expected status code 200 OK")
	var response map[string]interface{}
	err := json.Unmarshal(w.Body.Bytes(), &response)
	assert.Nil(t, err)
	assert.NotEmpty(t, response["data"], "Expected non-empty data field in the response")
}

// TestPostShowtime tests the POST /showtime endpoint
func TestPostShowtime(t *testing.T) {
	router := setupRouter()

	showtime := map[string]string{
		"movieID": "5f07c4cf1737dbb5adb378a0",
		"date":    "2022-12-15",
	}
	jsonValue, _ := json.Marshal(showtime)
	req, _ := http.NewRequest(http.MethodPost, "/showtime", bytes.NewBuffer(jsonValue))
	req.Header.Set("Content-Type", "application/json")
	w := httptest.NewRecorder()
	router.ServeHTTP(w, req)

	assert.Equal(t, http.StatusOK, w.Code, "Expected status code 200 OK")
	var response map[string]interface{}
	err := json.Unmarshal(w.Body.Bytes(), &response)
	assert.Nil(t, err)
	assert.NotNil(t, response["id"], "Expected a non-nil id field in the response")
}

// TestDeleteShowtime tests the DELETE /showtime/:id endpoint
func TestDeleteShowtime(t *testing.T) {
	router := setupRouter()

	req, _ := http.NewRequest(http.MethodDelete, "/showtime/5f07c4cf1737dbb5adb378a0", nil)
	w := httptest.NewRecorder()
	router.ServeHTTP(w, req)

	assert.Equal(t, http.StatusOK, w.Code, "Expected status code 200 OK")
	var response map[string]interface{}
	err := json.Unmarshal(w.Body.Bytes(), &response)
	assert.Nil(t, err)
	assert.Equal(t, true, response["success"], "Expected 'success' to be true in the response")
}

// TestUpdateShowtime tests the PATCH /showtime/:id endpoint
func TestUpdateShowtime(t *testing.T) {
	router := setupRouter()

	updates := map[string]string{
		"date": "2023-01-01",
	}
	jsonValue, _ := json.Marshal(updates)
	req, _ := http.NewRequest(http.MethodPatch, "/showtime/5f07c4cf1737dbb5adb378a0", bytes.NewBuffer(jsonValue))
	req.Header.Set("Content-Type", "application/json")
	w := httptest.NewRecorder()
	router.ServeHTTP(w, req)

	assert.Equal(t, http.StatusOK, w.Code, "Expected status code 200 OK")
	var response map[string]interface{}
	err := json.Unmarshal(w.Body.Bytes(), &response)
	assert.Nil(t, err)
	assert.Equal(t, "2023-01-01", response["date"], "Expected 'date' field to be updated in the response")
}
