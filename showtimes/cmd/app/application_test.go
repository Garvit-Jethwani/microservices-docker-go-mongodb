// ********RoostGPT********
/*
Application Test generated by RoostGPT for test ApplicationTest-Golang-2 using AI Type Open AI and AI Model gpt-4o


*/

// ********RoostGPT********
package main

import (
	"bytes"
	"context"
	"encoding/json"
	"log"
	"net/http"
	"net/http/httptest"
	"os"
	"testing"

	"github.com/gorilla/mux"
	"github.com/mmorejon/microservices-docker-go-mongodb/showtimes/pkg/models"
	"github.com/mmorejon/microservices-docker-go-mongodb/showtimes/pkg/models/mongodb"
	"github.com/stretchr/testify/assert"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

var app application

func setup() {
	infoLog := log.New(os.Stdout, "INFO\t", log.Ldate|log.Ltime)
	errLog := log.New(os.Stderr, "ERROR\t", log.Ldate|log.Ltime|log.Lshortfile)

	handlerOpts := options.Client().ApplyURI("mongodb://localhost:27017")
	client, err := mongo.NewClient(handlerOpts)
	if err != nil {
		errLog.Fatal(err)
	}
	ctx := context.TODO()
	err = client.Connect(ctx)
	if err != nil {
		errLog.Fatal(err)
	}

	app = application{
		infoLog:  infoLog,
		errorLog: errLog,
		showtimes: &mongodb.ShowTimeModel{
			C: client.Database("showtimes").Collection("showtimes"),
		},
	}
}

func Test_all(t *testing.T) {
	setup()
	req, _ := http.NewRequest("GET", "/api/showtimes/", nil)
	response := executeRequest(req)

	assert.Equal(t, http.StatusOK, response.Code)

	var showtimes []models.ShowTime
	json.Unmarshal(response.Body.Bytes(), &showtimes)
	assert.NotEmpty(t, showtimes)
}

func Test_findByID(t *testing.T) {
	setup()
	id := primitive.NewObjectID().Hex()
	req, _ := http.NewRequest("GET", "/api/showtimes/"+id, nil)
	response := executeRequest(req)

	assert.Equal(t, http.StatusOK, response.Code)
}

func Test_findByDate(t *testing.T) {
	setup()
	date := "2023-01-01"
	req, _ := http.NewRequest("GET", "/api/showtimes/filter/date/"+date, nil)
	response := executeRequest(req)

	assert.Equal(t, http.StatusOK, response.Code)
}

func Test_insert(t *testing.T) {
	setup()
	showtime := models.ShowTime{
		ID: primitive.NewObjectID(),
		// ... (populate other required fields)
	}
	body, _ := json.Marshal(showtime)
	req, _ := http.NewRequest("POST", "/api/showtimes/", bytes.NewBuffer(body))
	req.Header.Set("Content-Type", "application/json")

	response := executeRequest(req)

	assert.Equal(t, http.StatusCreated, response.Code)
}

func Test_delete(t *testing.T) {
	setup()
	id := primitive.NewObjectID().Hex()
	req, _ := http.NewRequest("DELETE", "/api/showtimes/"+id, nil)
	response := executeRequest(req)

	assert.Equal(t, http.StatusNoContent, response.Code)
}

func executeRequest(req *http.Request) *httptest.ResponseRecorder {
	rr := httptest.NewRecorder()
	router := mux.NewRouter()
	router.HandleFunc("/api/showtimes/", app.all).Methods("GET")
	router.HandleFunc("/api/showtimes/{id}", app.findByID).Methods("GET")
	router.HandleFunc("/api/showtimes/filter/date/{date}", app.findByDate).Methods("GET")
	router.HandleFunc("/api/showtimes/", app.insert).Methods("POST")
	router.HandleFunc("/api/showtimes/{id}", app.delete).Methods("DELETE")
	router.ServeHTTP(rr, req)

	return rr
}
