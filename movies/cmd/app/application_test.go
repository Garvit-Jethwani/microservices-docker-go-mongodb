// ********RoostGPT********
/*
Application Test generated by RoostGPT for test go-with-application-test using AI Type Open AI and AI Model gpt-4o


*/

// ********RoostGPT********
package main

import (
	"bytes"
	"context"
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"testing"
	"time"

	"github.com/gorilla/mux"
	"github.com/mmorejon/microservices-docker-go-mongodb/movies/pkg/models/mongodb"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

// Setup the application with a test database
func setup(t *testing.T) *application {
	clientOpts := options.Client().ApplyURI("mongodb://localhost:27017")
	client, err := mongo.NewClient(clientOpts)
	if err != nil {
		t.Fatal(err)
	}

	ctx, cancel := context.WithTimeout(context.Background(), 20*time.Second)
	defer cancel()

	err = client.Connect(ctx)
	if err != nil {
		t.Fatal(err)
	}

	app := &application{
		errorLog: log.New(os.Stderr, "ERROR\t", log.Ldate|log.Ltime|log.Lshortfile),
		infoLog:  log.New(os.Stdout, "INFO\t", log.Ldate|log.Ltime),
		movies:   &mongodb.MovieModel{C: client.Database("movies_test").Collection("movies")},
	}
	return app
}

// Clean up the test database
func teardown(app *application) {
	app.movies.C.Drop(context.Background())
}

func Test_all(t *testing.T) {
	app := setup(t)
	defer teardown(app)

	req, err := http.NewRequest("GET", "/api/movies/", nil)
	if err != nil {
		t.Fatal(err)
	}

	rr := httptest.NewRecorder()
	handler := http.HandlerFunc(app.all)
	handler.ServeHTTP(rr, req)

	if status := rr.Code; status != http.StatusOK {
		t.Errorf("handler returned wrong status code: got %v want %v", status, http.StatusOK)
	}

	var movies []mongodb.Movie
	err = json.NewDecoder(rr.Body).Decode(&movies)
	if err != nil {
		t.Fatal(err)
	}

	// Add assertions based on expected content
	// Assume there are no movies initially
	if len(movies) != 0 {
		t.Errorf("expected empty movie list, got %+v", movies)
	}
}

func Test_findByID(t *testing.T) {
	app := setup(t)
	defer teardown(app)

	// Insert test movie
	testMovie := mongodb.Movie{
		ID:          primitive.NewObjectID(),
		Title:       "Test Movie",
		Description: "A test movie",
		Year:        2021,
	}
	_, err := app.movies.Insert(testMovie)
	if err != nil {
		t.Fatal(err)
	}

	req, err := http.NewRequest("GET", "/api/movies/"+testMovie.ID.Hex(), nil)
	if err != nil {
		t.Fatal(err)
	}

	rr := httptest.NewRecorder()
	r := mux.NewRouter()
	r.HandleFunc("/api/movies/{id}", app.findByID)
	r.ServeHTTP(rr, req)

	if status := rr.Code; status != http.StatusOK {
		t.Errorf("handler returned wrong status code: got %v want %v", status, http.StatusOK)
	}

	var movie mongodb.Movie
	err = json.NewDecoder(rr.Body).Decode(&movie)
	if err != nil {
		t.Fatal(err)
	}

	if movie.ID != testMovie.ID {
		t.Errorf("expected movie ID %s, got %s", testMovie.ID.Hex(), movie.ID.Hex())
	}
}

func Test_insert(t *testing.T) {
	app := setup(t)
	defer teardown(app)

	newMovie := mongodb.Movie{
		Title:       "New Movie",
		Description: "A newly inserted movie",
		Year:        2022,
	}
	jsonMovie, err := json.Marshal(newMovie)
	if err != nil {
		t.Fatal(err)
	}

	req, err := http.NewRequest("POST", "/api/movies/", bytes.NewBuffer(jsonMovie))
	if err != nil {
		t.Fatal(err)
	}

	req.Header.Set("Content-Type", "application/json")
	rr := httptest.NewRecorder()
	handler := http.HandlerFunc(app.insert)
	handler.ServeHTTP(rr, req)

	if status := rr.Code; status != http.StatusOK {
		t.Errorf("handler returned wrong status code: got %v want %v", status, http.StatusOK)
	}
}

func Test_delete(t *testing.T) {
	app := setup(t)
	defer teardown(app)

	// Insert test movie
	testMovie := mongodb.Movie{
		ID:          primitive.NewObjectID(),
		Title:       "Movie to Delete",
		Description: "A movie to be deleted",
		Year:        2020,
	}
	_, err := app.movies.Insert(testMovie)
	if err != nil {
		t.Fatal(err)
	}

	req, err := http.NewRequest("DELETE", "/api/movies/"+testMovie.ID.Hex(), nil)
	if err != nil {
		t.Fatal(err)
	}

	rr := httptest.NewRecorder()
	r := mux.NewRouter()
	r.HandleFunc("/api/movies/{id}", app.delete)
	r.ServeHTTP(rr, req)

	if status := rr.Code; status != http.StatusOK {
		t.Errorf("handler returned wrong status code: got %v want %v", status, http.StatusOK)
	}

	// Verify the movie is deleted
	_, err = app.movies.FindByID(testMovie.ID.Hex())
	if err == nil || err.Error() != "mongo: no documents in result" {
		t.Errorf("expected no documents error, got %v", err)
	}
}

