// ********RoostGPT********
/*
Application Test generated by RoostGPT for test go-with-application-test using AI Type Open AI and AI Model gpt-4o


*/

// ********RoostGPT********
package main

import (
    "bytes"
    "encoding/json"
    "net/http"
    "net/http/httptest"
    "testing"
)

// mockMovie struct for mocking purposes
type mockMovie struct {
    ID       string `json:"id"`
    Title    string `json:"title"`
    Year     int    `json:"year"`
    Director string `json:"director"`
}

// Utility function to create test http server and application
func createTestApplication(t *testing.T) (*application, *httptest.Server) {
    // Create logger for testing purposes
    infoLog := log.New(io.Discard, "INFO\t", log.Ldate|log.Ltime)
    errLog := log.New(io.Discard, "ERROR\t", log.Ldate|log.Ltime|log.Lshortfile)

    app := &application{
        infoLog: infoLog,
        errorLog: errLog,
        movies: &mongodb.MovieModel{ /* Mock or Test your movie model here */ },
    }

    ts := httptest.NewServer(app.routes())

    return app, ts
}

func TestAllMovies(t *testing.T) {
    app, ts := createTestApplication(t)
    defer ts.Close()

    req, err := http.NewRequest("GET", ts.URL+"/api/movies/", nil)
    if err != nil {
        t.Fatal(err)
    }

    rr := httptest.NewRecorder()

    app.all(rr, req)

    if status := rr.Code; status != http.StatusOK {
        t.Errorf("Handler returned wrong status code: got %v want %v", status, http.StatusOK)
    }

    expected := `[{"id":"1","title":"Movie One","year":2021,"director":"Director One"},{"id":"2","title":"Movie Two","year":2022,"director":"Director Two"}]`
    if rr.Body.String() != expected {
        t.Errorf("Handler returned unexpected body: got %v want %v", rr.Body.String(), expected)
    }
}

func TestFindMovieByID(t *testing.T) {
    app, ts := createTestApplication(t)
    defer ts.Close()

    req, err := http.NewRequest("GET", ts.URL+"/api/movies/1", nil)
    if err != nil {
        t.Fatal(err)
    }

    rr := httptest.NewRecorder()

    app.findByID(rr, req)

    if status := rr.Code; status != http.StatusOK {
        t.Errorf("Handler returned wrong status code: got %v want %v", status, http.StatusOK)
    }

    expected := `{"id":"1","title":"Movie One","year":2021,"director":"Director One"}`
    if rr.Body.String() != expected {
        t.Errorf("Handler returned unexpected body: got %v want %v", rr.Body.String(), expected)
    }
}

func TestInsertMovie(t *testing.T) {
    app, ts := createTestApplication(t)
    defer ts.Close()

    movie := mockMovie{Title: "New Movie", Year: 2021, Director: "New Director"}
    movieJSON, err := json.Marshal(movie)
    if err != nil {
        t.Fatal(err)
    }

    req, err := http.NewRequest("POST", ts.URL+"/api/movies/", bytes.NewBuffer(movieJSON))
    if err != nil {
        t.Fatal(err)
    }

    req.Header.Set("Content-Type", "application/json")
    rr := httptest.NewRecorder()

    app.insert(rr, req)

    if status := rr.Code; status != http.StatusOK {
        t.Errorf("Handler returned wrong status code: got %v want %v", status, http.StatusOK)
    }
}

func TestDeleteMovie(t *testing.T) {
    app, ts := createTestApplication(t)
    defer ts.Close()

    req, err := http.NewRequest("DELETE", ts.URL+"/api/movies/1", nil)
    if err != nil {
        t.Fatal(err)
    }

    rr := httptest.NewRecorder()

    app.delete(rr, req)

    if status := rr.Code; status != http.StatusOK {
        t.Errorf("Handler returned wrong status code: got %v want %v", status, http.StatusOK)
    }
}

